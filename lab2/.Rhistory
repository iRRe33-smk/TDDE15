knitr::opts_chunk$set(echo = TRUE)
install.packages("HMM")
install.packages("entropy")
transition = matrix(0, 10, 10)
emission = matrix(0, 10, 10)
for (i in 0:9)
{
# Set transition values to .5 for S(current) and S(current+1)
transition[i+1, i:(i+1)%%10 +1] = 0.5
# Set emission values to .2 for S(current) and the four closest columns
emission[i+1, (i-2):(i+2)%%10 +1] = 0.2
}
transition
emission
#Build the HMM with the transition and emission matrices
states=1:10
symbols=1:10
HMM_model=initHMM(States=states, Symbols=symbols, transProbs=transition, emissionProbs=emission)
#install.packages("HMM")
library(HMM)
#install.packages("entropy")
library(entropy)
-3 %% 10
#Build the HMM with the transition and emission matrices
states=1:10
symbols=1:10
HMM_model=initHMM(States=states, Symbols=symbols, transProbs=transition, emissionProbs=emission)
sim = simHMM(HMM_model, 100)
sim
observations = sim$observation
# Calculate alpha and beta to be used in filtering and smoothing (+log convert)
alpha = exp(forward(HMM_model, observations))
beta = exp(backward(HMM_model, observations))
# Calculate filtering- and smoothing probability distributions (requires normalization afterwards)
filtered = alpha/sum(alpha)
smoothened = filtered*beta/sum(filtered*beta)
#Normalize to get actual probabilities
filtered_dist = prop.table(filtered, 2)
smooth_dist = prop.table(smoothened, 2)
# Compute the most probable path using the Viterbi algorithm
most_probable_path = viterbi(HMM_model, observations)
filtered
head(smooth_dist)
nSimulations = 150
simLength = 300
mat_ents = matrix(nrow=simLength, ncol=nSimulations)
for ( i in 1:nSimulations){
simulated_path = simHMM(HMM_model,simLength)
obs = simulated_path$observation
f = forward(mod,obs)
filtered = prop.table(t(exp(f)),margin=1)
entropy_vec = apply(filtered,1, entropy.empirical )
mat_ents[,i] = entropy_vec
}
nSimulations = 150
simLength = 300
mat_ents = matrix(nrow=simLength, ncol=nSimulations)
for ( i in 1:nSimulations){
simulated_path = simHMM(HMM_model,simLength)
obs = simulated_path$observation
f = forward(mod,obs)
filtered = prop.table(t(exp(f)),margin=1)
entropy_vec = apply(filtered,1, entropy.empirical )
mat_ents[,i] = entropy_vec
}
nSimulations = 150
simLength = 300
mat_ents = matrix(nrow=simLength, ncol=nSimulations)
for ( i in 1:nSimulations){
simulated_path = simHMM(HMM_model,simLength)
obs = simulated_path$observation
f = forward(HMM_model,obs)
filtered = prop.table(t(exp(f)),margin=1)
entropy_vec = apply(filtered,1, entropy.empirical )
mat_ents[,i] = entropy_vec
}
ent_means = apply(mat_ents,1,mean)
plot(x=1:simLength, y = ent_means, main="averag entropy after n steps", xlab="n steps", ylab="average entropy")
knitr::opts_chunk$set(echo = TRUE)
library("HMM")
library("entropy")
acc_mat = matrix(ncol=4, nrow=0)
colnames(acc_mat) = c("NumSteps", "filtered_acc", "smoothed_acc", "viterbi_acc")
for  ( temp in 1:50){
n = 100
simulated_path = simHMM(mod,n)
obs = simulated_path$observation
f = forward(mod,obs)
filtered = prop.table(t(exp(f)),margin=1)
b = backward(mod, obs)
smoothed = prop.table(t(exp(f + b)) ,margin=1)
most_probable_path = viterbi(mod,obs)
guesses = matrix(nrow=n,ncol=3)
colnames(guesses) = c("filtered", "smoothed", "viterbi")
for (i in 1:n){
filtered_guess = symbols[ which.max(filtered[i,])]
smoothed_guess = symbols[ which.max(smoothed[i,])]
guesses[i,1:2] = c(filtered_guess, smoothed_guess)
}
guesses[,3] = most_probable_path
acc = colMeans(guesses == simulated_path$states)
#print(acc)
acc_mat = rbind(acc_mat, c(n,acc))
}
acc_mat = matrix(ncol=4, nrow=0)
colnames(acc_mat) = c("NumSteps", "filtered_acc", "smoothed_acc", "viterbi_acc")
for  ( iter in 1:50){
n = 100
simulated_path = simHMM(HMM_model,n)
obs = simulated_path$observation
f = forward(mod,obs)
filtered = prop.table(t(exp(f)),margin=1)
b = backward(mod, obs)
smoothed = prop.table(t(exp(f + b)) ,margin=1)
most_probable_path = viterbi(mod,obs)
guesses = matrix(nrow=n,ncol=3)
colnames(guesses) = c("filtered", "smoothed", "viterbi")
for (i in 1:n){
filtered_guess = symbols[ which.max(filtered[i,])]
smoothed_guess = symbols[ which.max(smoothed[i,])]
guesses[i,1:2] = c(filtered_guess, smoothed_guess)
}
guesses[,3] = most_probable_path
acc = colMeans(guesses == simulated_path$states)
acc_mat = rbind(acc_mat, c(n,acc))
}
acc_mat = matrix(ncol=4, nrow=0)
colnames(acc_mat) = c("NumSteps", "filtered_acc", "smoothed_acc", "viterbi_acc")
for  ( iter in 1:50){
n = 100
simulated_path = simHMM(HMM_model,n)
obs = simulated_path$observation
f = forward(HMM_model,obs)
filtered = prop.table(t(exp(f)),margin=1)
b = backward(HMM_model, obs)
smoothed = prop.table(t(exp(f + b)) ,margin=1)
most_probable_path = viterbi(mod,obs)
guesses = matrix(nrow=n,ncol=3)
colnames(guesses) = c("filtered", "smoothed", "viterbi")
for (i in 1:n){
filtered_guess = symbols[ which.max(filtered[i,])]
smoothed_guess = symbols[ which.max(smoothed[i,])]
guesses[i,1:2] = c(filtered_guess, smoothed_guess)
}
guesses[,3] = most_probable_path
acc = colMeans(guesses == simulated_path$states)
acc_mat = rbind(acc_mat, c(n,acc))
}
acc_mat = matrix(ncol=4, nrow=0)
colnames(acc_mat) = c("NumSteps", "filtered_acc", "smoothed_acc", "viterbi_acc")
for  ( iter in 1:50){
n = 100
simulated_path = simHMM(HMM_model,n)
obs = simulated_path$observation
f = forward(HMM_model,obs)
filtered = prop.table(t(exp(f)),margin=1)
b = backward(HMM_model, obs)
smoothed = prop.table(t(exp(f + b)) ,margin=1)
most_probable_path = viterbi(HMM_model,obs)
guesses = matrix(nrow=n,ncol=3)
colnames(guesses) = c("filtered", "smoothed", "viterbi")
for (i in 1:n){
filtered_guess = symbols[ which.max(filtered[i,])]
smoothed_guess = symbols[ which.max(smoothed[i,])]
guesses[i,1:2] = c(filtered_guess, smoothed_guess)
}
guesses[,3] = most_probable_path
acc = colMeans(guesses == simulated_path$states)
acc_mat = rbind(acc_mat, c(n,acc))
}
plot(density(acc_mat[,2]), col ="red",xlab="accuracy", xlim=c(0,1), ylim=c(0,10))
lines(density(acc_mat[,3]), col ="green")
lines(density(acc_mat[,4]), col ="blue")
legend("topleft",legend = c("filtered", "smoothed", "viterbi MPP"), col=c("red", "green", "blue"), lty = 1)
acc_mat = matrix(ncol=4, nrow=0)
colnames(acc_mat) = c("NumSteps", "filtered_acc", "smoothed_acc", "viterbi_acc")
nSimulations = 150
simLength = 100
for  ( iter in 1:150){
simulated_path = simHMM(HMM_model,simLength)
obs = simulated_path$observation
f = forward(HMM_model,obs)
filtered = prop.table(t(exp(f)),margin=1)
b = backward(HMM_model, obs)
smoothed = prop.table(t(exp(f + b)) ,margin=1)
most_probable_path = viterbi(HMM_model,obs)
guesses = matrix(nrow=n,ncol=3)
colnames(guesses) = c("filtered", "smoothed", "viterbi")
for (i in 1:n){
filtered_guess = symbols[ which.max(filtered[i,])]
smoothed_guess = symbols[ which.max(smoothed[i,])]
guesses[i,1:2] = c(filtered_guess, smoothed_guess)
}
guesses[,3] = most_probable_path
acc = colMeans(guesses == simulated_path$states)
acc_mat = rbind(acc_mat, c(n,acc))
}
plot(density(acc_mat[,2]), col ="red",xlab="accuracy", xlim=c(0,1), ylim=c(0,10))
lines(density(acc_mat[,3]), col ="green")
lines(density(acc_mat[,4]), col ="blue")
legend("topleft",legend = c("filtered", "smoothed", "viterbi MPP"), col=c("red", "green", "blue"), lty = 1)
acc_mat
nSimulations = 150
simLength = 100
mat_ents = matrix(nrow=simLength, ncol=nSimulations)
for ( i in 1:nSimulations){
simulated_path = simHMM(HMM_model,simLength)
obs = simulated_path$observation
f = forward(HMM_model,obs)
filtered = prop.table(t(exp(f)),margin=1)
entropy_vec = apply(filtered,1, entropy.empirical )
mat_ents[,i] = entropy_vec
}
ent_means = apply(mat_ents,1,mean)
plot(x=1:simLength, y = ent_means, main="average entropy after n steps", xlab="n steps", ylab="average entropy")
acc_mat = matrix(ncol=4, nrow=0)
colnames(acc_mat) = c("NumSteps", "filtered_acc", "smoothed_acc", "viterbi_acc")
nSimulations = 1000
simLength = 100
for  ( iter in 1:150){
simulated_path = simHMM(HMM_model,simLength)
obs = simulated_path$observation
f = forward(HMM_model,obs)
filtered = prop.table(t(exp(f)),margin=1)
b = backward(HMM_model, obs)
smoothed = prop.table(t(exp(f + b)) ,margin=1)
most_probable_path = viterbi(HMM_model,obs)
guesses = matrix(nrow=n,ncol=3)
colnames(guesses) = c("filtered", "smoothed", "viterbi")
for (i in 1:n){
filtered_guess = symbols[ which.max(filtered[i,])]
smoothed_guess = symbols[ which.max(smoothed[i,])]
guesses[i,1:2] = c(filtered_guess, smoothed_guess)
}
guesses[,3] = most_probable_path
acc = colMeans(guesses == simulated_path$states)
acc_mat = rbind(acc_mat, c(simLength,acc))
}
plot(density(acc_mat[,2]), col ="red",xlab="accuracy", xlim=c(0,1), ylim=c(0,10))
lines(density(acc_mat[,3]), col ="green")
lines(density(acc_mat[,4]), col ="blue")
legend("topleft",legend = c("filtered", "smoothed", "viterbi MPP"), col=c("red", "green", "blue"), lty = 1, main= " density of accuracy, repeated simulations.")
plot(density(acc_mat[,2]), col ="red",xlab="accuracy", xlim=c(0,1), ylim=c(0,10), main= " density of accuracy, repeated simulations.")
lines(density(acc_mat[,3]), col ="green")
lines(density(acc_mat[,4]), col ="blue")
legend("topleft",legend = c("filtered", "smoothed", "viterbi MPP"), col=c("red", "green", "blue"), lty = 1)
nSimulations = 150
simLength = 100
#could have reused simulations from previous task
mat_ents = matrix(nrow=simLength, ncol=nSimulations)
for ( i in 1:nSimulations){
simulated_path = simHMM(HMM_model,simLength)
obs = simulated_path$observation
f = forward(HMM_model,obs)
filtered = prop.table(t(exp(f)),margin=1)
entropy_vec = apply(filtered,1, entropy.empirical )
mat_ents[,i] = entropy_vec
}
ent_means = apply(mat_ents,1,mean)
plot(x=1:simLength, y = ent_means, main="average entropy in filtered distribution after n steps", xlab="n steps", ylab="average entropy")
set.seed(123)
simulated_path = simHMM(HMM_model,100)
obs = simulated_path$observation
f = forward(HMM_model,obs)
filtered = prop.table(t(exp(f)),margin=1)
prob_101 = round(filtered[100,] %*% P, digits = 3)
sim = simHMM(HMM_model, 100)
f = forward(HMM_model, sim$observation)
filtered = prop.table(exp(t(f)),1)
prob_101 = filtered[100,] %*% transition
prob_101
sim = simHMM(HMM_model, 100)
f = forward(HMM_model, sim$observation)
filtered = prop.table(exp(t(f)),1)
prob_101 = filtered[100,] %*% transition
prob_101 = round(filtered[100,] %*% transition, digits = 3)
rownames(prob_101)= "Inferred Probabilty"
colnames(prob_101) = 1:10
prob_101
sim = simHMM(HMM_model, 100)
f = forward(HMM_model, sim$observation)
filtered = prop.table(exp(t(f)),1)
prob_101 = filtered[100,] %*% transition
prob_101 = round(filtered[100,] %*% transition, digits = 3)
prob_101 = rbind(filtered[100,])
rownames(prob_101)= c("Inferred Probabilty 101", "Filtered dist. 100")
sim = simHMM(HMM_model, 100)
f = forward(HMM_model, sim$observation)
filtered = prop.table(exp(t(f)),1)
prob_101 = filtered[100,] %*% transition
prob_101 = round(filtered[100,] %*% transition, digits = 3)
prob_101 = rbind(prob_101,filtered[100,])
rownames(prob_101)= c("Inferred Probabilty 101", "Filtered dist. 100")
colnames(prob_101) = 1:10
prob_101[2:1,]
sim = simHMM(HMM_model, 100)
f = forward(HMM_model, sim$observation)
filtered = prop.table(exp(t(f)),1)
prob_101 = filtered[100,] %*% transition
prob_101 = filtered[100,] %*% transition
prob_101 = round(rbind(prob_101,filtered[100,]), digits=3)
rownames(prob_101)= c("Inferred Probabilty. 101", "Filtered dist. 100")
colnames(prob_101) = 1:10
prob_101[2:1,]
#install.packages("HMM")
library(HMM)
#install.packages("entropy")
library(entropy)
transition = matrix(0, 10, 10)
emission = matrix(0, 10, 10)
for (i in 0:9)
{
# Set transition values to .5 for S(current) and S(current+1)
transition[i+1, i:(i+1)%%10 +1] = 0.5
# Set emission values to .2 for S(current) and the four closest columns
emission[i+1, (i-2):(i+2)%%10 +1] = 0.2
}
transition
emission
#Build the HMM with the transition and emission matrices
states=1:10
symbols=1:10
HMM_model=initHMM(States=states, Symbols=symbols, transProbs=transition, emissionProbs=emission)
sim = simHMM(HMM_model, 100)
sim
observations = sim$observation
# Calculate alpha and beta to be used in filtering and smoothing (+log convert)
alpha = exp(forward(HMM_model, observations))
beta = exp(backward(HMM_model, observations))
#Calculate filtering- and smoothing probability distributions
filtered_dist = prop.table(alpha, 2)
smooth_dist = prop.table(alpha*beta, 2)
# Compute the most probable path using the Viterbi algorithm
most_probable_path = viterbi(HMM_model, observations)
guesses = matrix(nrow=100,ncol=3)
colnames(guesses) = c("filtered", "smoothed", "viterbi")
for (i in 1:100){
filtered_guess = symbols[ which.max(filtered_dist[,i])]
smooth_guess = symbols[ which.max(smooth_dist[,i])]
guesses[i,1:2] = c(filtered_guess, smooth_guess)
}
guesses[,3] = most_probable_path
acc = colMeans(guesses == sim$states)
acc
acc_mat = matrix(ncol=4, nrow=0)
colnames(acc_mat) = c("NumSteps", "filtered_acc", "smoothed_acc", "viterbi_acc")
nSimulations = 1000
simLength = 100
for  ( iter in 1:150){
simulated_path = simHMM(HMM_model,simLength)
obs = simulated_path$observation
f = forward(HMM_model,obs)
filtered = prop.table(t(exp(f)),margin=1)
b = backward(HMM_model, obs)
smoothed = prop.table(t(exp(f + b)) ,margin=1)
most_probable_path = viterbi(HMM_model,obs)
guesses = matrix(nrow=n,ncol=3)
colnames(guesses) = c("filtered", "smoothed", "viterbi")
for (i in 1:n){
filtered_guess = symbols[ which.max(filtered[i,])]
smoothed_guess = symbols[ which.max(smoothed[i,])]
guesses[i,1:2] = c(filtered_guess, smoothed_guess)
}
guesses[,3] = most_probable_path
acc = colMeans(guesses == simulated_path$states)
acc_mat = rbind(acc_mat, c(simLength,acc))
}
acc_mat = matrix(ncol=4, nrow=0)
colnames(acc_mat) = c("NumSteps", "filtered_acc", "smoothed_acc", "viterbi_acc")
nSimulations = 1000
simLength = 100
for  ( iter in 1:150){
simulated_path = simHMM(HMM_model,simLength)
obs = simulated_path$observation
f = forward(HMM_model,obs)
filtered = prop.table(t(exp(f)),margin=1)
b = backward(HMM_model, obs)
smoothed = prop.table(t(exp(f + b)) ,margin=1)
most_probable_path = viterbi(HMM_model,obs)
guesses = matrix(nrow=simLength,ncol=3)
colnames(guesses) = c("filtered", "smoothed", "viterbi")
for (i in 1:n){
filtered_guess = symbols[ which.max(filtered[i,])]
smoothed_guess = symbols[ which.max(smoothed[i,])]
guesses[i,1:2] = c(filtered_guess, smoothed_guess)
}
guesses[,3] = most_probable_path
acc = colMeans(guesses == simulated_path$states)
acc_mat = rbind(acc_mat, c(simLength,acc))
}
acc_mat = matrix(ncol=4, nrow=0)
colnames(acc_mat) = c("NumSteps", "filtered_acc", "smoothed_acc", "viterbi_acc")
nSimulations = 1000
simLength = 100
for  ( iter in 1:150){
simulated_path = simHMM(HMM_model,simLength)
obs = simulated_path$observation
f = forward(HMM_model,obs)
filtered = prop.table(t(exp(f)),margin=1)
b = backward(HMM_model, obs)
smoothed = prop.table(t(exp(f + b)) ,margin=1)
most_probable_path = viterbi(HMM_model,obs)
guesses = matrix(nrow=simLength,ncol=3)
colnames(guesses) = c("filtered", "smoothed", "viterbi")
for (i in 1:simLength){
filtered_guess = symbols[ which.max(filtered[i,])]
smoothed_guess = symbols[ which.max(smoothed[i,])]
guesses[i,1:2] = c(filtered_guess, smoothed_guess)
}
guesses[,3] = most_probable_path
acc = colMeans(guesses == simulated_path$states)
acc_mat = rbind(acc_mat, c(simLength,acc))
}
plot(density(acc_mat[,2]), col ="red",xlab="accuracy", xlim=c(0,1), ylim=c(0,10), main= " density of accuracy, repeated simulations.")
lines(density(acc_mat[,3]), col ="green")
lines(density(acc_mat[,4]), col ="blue")
legend("topleft",legend = c("filtered", "smoothed", "viterbi MPP"), col=c("red", "green", "blue"), lty = 1)
acc_mat = matrix(ncol=4, nrow=0)
colnames(acc_mat) = c("NumSteps", "filtered_acc", "smoothed_acc", "viterbi_acc")
nSimulations = 1000
simLength = 100
for  ( iter in 1:150){
simulated_path = simHMM(HMM_model,simLength)
obs = simulated_path$observation
f = forward(HMM_model,obs)
filtered = prop.table(t(exp(f)),margin=1)
b = backward(HMM_model, obs)
smoothed = prop.table(t(exp(f + b)) ,margin=1)
guesses = matrix(nrow=simLength,ncol=3)
colnames(guesses) = c("filtered", "smoothed", "viterbi")
for (i in 1:simLength){
filtered_guess = symbols[ which.max(filtered[i,])]
smoothed_guess = symbols[ which.max(smoothed[i,])]
guesses[i,1:2] = c(filtered_guess, smoothed_guess)
}
most_probable_path = viterbi(HMM_model,obs)
guesses[,3] = most_probable_path
acc = colMeans(guesses == simulated_path$states)
acc_mat = rbind(acc_mat, c(simLength,acc))
}
plot(density(acc_mat[,2]), col ="red",xlab="accuracy", xlim=c(0,1), ylim=c(0,10), main= " density of accuracy, repeated simulations.")
lines(density(acc_mat[,3]), col ="green")
lines(density(acc_mat[,4]), col ="blue")
legend("topleft",legend = c("filtered", "smoothed", "viterbi MPP"), col=c("red", "green", "blue"), lty = 1)
nSimulations = 150
simLength = 100
#could have reused simulations from previous task
mat_ents = matrix(nrow=simLength, ncol=nSimulations)
for ( i in 1:nSimulations){
simulated_path = simHMM(HMM_model,simLength)
obs = simulated_path$observation
f = forward(HMM_model,obs)
filtered = prop.table(t(exp(f)),margin=1)
entropy_vec = apply(filtered,1, entropy.empirical )
mat_ents[,i] = entropy_vec
}
ent_means = apply(mat_ents,1,mean)
plot(x=1:simLength, y = ent_means, main="average entropy in filtered distribution after n steps", xlab="n steps", ylab="average entropy")
